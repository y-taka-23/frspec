module io.cheshirecat.FRSpec where

import frege.java.Lang ( System.exit )

-- type stabs
type WriterT w m a = ()
type FilePath = String
type Args = () -- Defined in QuichCheck
type Arg e = () -- inner type of Example

type SpecWith a = SpecM a ()

type ActionWith a = a -> IO ()

data Tree c a =
      Node String [Tree a c]
    | NodeWithCleanup c [Tree c a]
    | Leaf a

--instance Functor (Tree c) where
--instance Foldable (Tree c) where
--instance Traversable (Tree c) where

data Params = Params
    { paramsQuickCheckArgs  :: Args
    , paramsSmallCheckDepth :: Int
    }

--instance Show Params where

type Progress = (Int, Int)

type ProgressCallback = Progress -> IO ()

data LocationAccuracy =
      ExactLocation
    | BestEffort

--instance Eq LocationAccuracy
--instance Read LocationAccuracy
--instance Show LocationAccuracy

data Location = Location
    { locationFile     :: FilePath
    , locationLine     :: Int
    , locationColumn   :: Int
    , locationAccuracy :: LocationAccuracy
    }

--instance Eq Location where
--instance Read Location where
--instance Show Location where

data Result =
      Success
    | Pending (Maybe String)
    | Fail (Maybe Location) String

--instance Eq Result where
--instance Read Result where
--instance Show Result where
--instance Exception Result where
--instance Example Result where
--type Arg Result

data Item a = Item
    { itemRequirement      :: String
    , itemLocation         :: Maybe Location
    , itemIsParallelizable :: Bool
    , itemExample          :: Params -> (ActionWith a -> IO ()) ->
                              ProgressCallback -> IO Result
    }

type SpecTree a = Tree (ActionWith a) (Item a)

type SpecM a r = WriterT [SpecTree a] IO r

--instance Functor (SpecM a r) where
--instance Applicative (SpecM a r) where
--instance Monad (SpecM a r) where

describe :: String -> SpecWith a -> SpecWith a
describe = undefined

class Example e where
    evaluateExample :: e -> Params -> (ActionWith (Arg e) -> IO ()) ->
                       ProgressCallback -> IO Result

--instance Example Bool where
--instance Example Property where
--instance Example Result where

instance Example Expectation where
    evaluateExample e _ _ _ = undefined

--instance Example (a -> Expectation) where
--instance Example (a -> Property) where

--it :: (?loc :: CallStack, Example a) => String -> a -> SpecWith (Arg a)
it :: (Example a) => String -> a -> SpecWith (Arg a)
it = undefined

type Spec = SpecWith ()

hspec :: Spec -> IO ()
hspec = hspecWith defaultConfig

hspecWith :: Config -> Spec -> IO ()
hspecWith conf spec = do
    r <- hspecWithResult conf spec
    unless (isSuccess r) exitFailure

-- TODO: In v3.23, exitFailure have not merged...
exitFailure :: IO ()
exitFailure = System.exit 1

data Config = Config
    { configNested     :: Bool
    , configFormatter  :: Maybe String
    , configNoMain     :: Bool
    , configModuleName :: Maybe Bool
    }
derive Eq   Config
derive Show Config

defaultConfig :: Config
defaultConfig = Config false Nothing false Nothing

data Summary = Summary
    { summaryExamples :: Int
    , summaryFailures :: Int
    }
derive Eq   Summary
derive Show Summary

isSuccess :: Summary -> Bool
isSuccess = undefined

hspecWithResult :: Config -> Spec -> IO Summary
hspecWithResult = undefined

---------- in hspec-expectations -----------------

type Expectation = Assertion

--shouldBe :: (?loc :: CallStack, Show a, Eq a) => a -> a -> Expectation
shouldBe :: (Show a, Eq a) => a -> a -> Expectation
shouldBe = undefined
infix 1 shouldBe

---------- in HUnit -----------------

type Assertion = IO ()


main = hspec $ do
    describe "Prelude.head" $ do
        it "returns the first element of a list" $ do
            head [23 ..] `shouldBe` 23
