module io.cheshirecat.FRSpec where

import frege.control.monad.trans.MonadIO ( MonadIO, liftIO )
import frege.control.monad.trans.MonadTrans ( MonadTrans, lift )
import frege.data.List ( intercalate, isInfixOf )
import frege.data.Monoid ( Monoid, mappend )
import frege.java.Lang ( System.exit )
import frege.system.Random ( newStdGen, randomR )

-- type stubs
type FilePath = String
type Args = () -- Defined in QuichCheck
type Arg e = () -- inner type of Example
type ExitCode = Int
type FormatM a = ()
type Handle = ()
type FailureReason = ()

type SpecWith a = SpecM a ()

type ActionWith a = a -> IO ()

data Tree c a =
      Node String [Tree c a]
    | NodeWithCleanup c [Tree c a]
    | Leaf a

--instance Functor (Tree c) where
--instance Foldable (Tree c) where
--instance Traversable (Tree c) where

data Params = Params
    { paramsQuickCheckArgs  :: Args
    , paramsSmallCheckDepth :: Int
    }

--instance Show Params where

defaultParams :: Params
defaultParams = Params {
      paramsQuickCheckArgs  = undefined
    , paramsSmallCheckDepth = 5
}

type Progress = (Int, Int)

type ProgressCallback = Progress -> IO ()

data LocationAccuracy =
      ExactLocation
    | BestEffort

--instance Eq LocationAccuracy
--instance Read LocationAccuracy
--instance Show LocationAccuracy

data Location = Location
    { locationFile     :: FilePath
    , locationLine     :: Int
    , locationColumn   :: Int
    , locationAccuracy :: LocationAccuracy
    }

--instance Eq Location where
--instance Read Location where
--instance Show Location where

data Result =
      Success
    | Pending (Maybe String)
    | Fail (Maybe Location) String

--instance Eq Result where
--instance Read Result where
--instance Show Result where
--instance Exception Result where
--instance Example Result where
--type Arg Result

data Item a = Item
    { itemRequirement      :: String
    , itemLocation         :: Maybe Location
    , itemIsParallelizable :: Bool
    , itemExample          :: Params -> (ActionWith a -> IO ()) ->
                              ProgressCallback -> IO Result
    }

type SpecTree a = Tree (ActionWith a) (Item a)

data SpecM a r = SpecM (WriterT [SpecTree a] IO r)

runSpecM :: SpecWith a -> IO [SpecTree a]
runSpecM (SpecM spec) = execWriterT spec

instance Functor (SpecM a) where
    fmap f (SpecM spec) = SpecM $ fmap f spec

instance Applicative (SpecM a) where
    pure = SpecM . pure
    (<*>) (SpecM f) (SpecM v) = SpecM $ f <*> v

instance Monad (SpecM a) where
    pure = Applicative.pure
    (>>=) (SpecM m) k = SpecM $ m >>= unSpecM . k
        where unSpecM (SpecM x) = x

describe :: String -> SpecWith a -> SpecWith a
describe label spec =
    runIO (runSpecM spec) >>= fromSpecList . return . specGroup label

runIO :: IO r -> SpecM a r
runIO = SpecM . liftIO

-- TODO: how can I realize the inner type 'Arg e'?
class Example e where
    evaluateExample :: e -> Params -> (ActionWith t -> IO ()) ->
                       ProgressCallback -> IO Result
--    type Arg e

--instance Example Bool where
--instance Example Property where
--instance Example Result where

instance Example Expectation where
    evaluateExample e = evaluateExample (\() -> e)

-- Todo: How can I make exceptions polymorphic?
instance Example (a -> Expectation) where
    evaluateExample e _ (action :: ActionWith a -> IO ()) _ =
        (action e >> return Success) `catches`
            [ return . hunitFailureToResult ]
--            [ return . hunitFailureToResult
--            , return :: Result -> IO Result
--            ]

hunitFailureToResult :: HUnitFailure -> Result
hunitFailureToResult e = Fail Nothing e.getMessage

--instance Example (a -> Property) where

--it :: (?loc :: CallStack, Example a) => String -> a -> SpecWith (Arg a)
it :: (Example a) => String -> a -> SpecWith (Arg a)
it label action = fromSpecList [ specItem label action ]

fromSpecList :: [SpecTree a] -> SpecWith a
fromSpecList = SpecM . tell

--specItem :: (?loc :: CallStack, Example a) => String -> a -> SpecTree (Arg a)
specItem :: (Example a) => String -> a -> SpecTree (Arg a)
specItem s e = Leaf $ Item requirement Nothing false e.evaluateExample
    where
        requirement
            | null s    = "(unspecified behavior)"
            | otherwise = s

specGroup :: String -> [SpecTree a] -> SpecTree a
specGroup s = Node msg
    where
        msg
            | null s    = "(no description given)"
            | otherwise = s

type Spec = SpecWith ()

hspec :: Spec -> IO ()
hspec = hspecWith defaultConfig

hspecWith :: Config -> Spec -> IO ()
hspecWith conf spec = do
    r <- hspecWithResult conf spec
    unless (isSuccess r) exitFailure

-- TODO: In v3.23, exitFailure have not merged...
exitFailure :: IO ()
exitFailure = System.exit 1

data Config = Config
    { configQuickCheckSeed            :: Maybe Integer
    , configQuickCheckMaxSuccess      :: Maybe Int
    , configQuickCheckMaxDiscardRatio :: Maybe Int
    , configQuickCheckMaxSize         :: Maybe Int
    , configRerun                     :: Bool
    , configRerunAllOnSuccess         :: Bool
    , configIgnoreConfigFile          :: Bool
    , configFilterPredicate           :: Maybe (Path -> Bool)
    , configSkipPredicate             :: Maybe (Path -> Bool)
    , configColorMode                 :: ColorMode
    , configDiff                      :: Bool
    , configPrintCpuTime              :: Bool
    , configDryRun                    :: Bool
    , configFastFail                  :: Bool
    , configSmallCheckDepth           :: Int
    , configFormatter                 :: Maybe Formatter
    , configConcurrentJobs            :: Maybe Int
    , configFailureReport             :: Maybe FilePath
    }

defaultConfig :: Config
defaultConfig = Config
    { configQuickCheckSeed            = Nothing
    , configQuickCheckMaxSuccess      = Nothing
    , configQuickCheckMaxDiscardRatio = Nothing
    , configQuickCheckMaxSize         = Nothing
    , configRerun                     = False
    , configRerunAllOnSuccess         = False
    , configIgnoreConfigFile          = False
    , configFilterPredicate           = Nothing
    , configSkipPredicate             = Nothing
    , configColorMode                 = ColorAuto
    , configDiff                      = True
    , configPrintCpuTime              = False
    , configDryRun                    = False
    , configFastFail                  = False
    , configSmallCheckDepth           = defaultParams.paramsSmallCheckDepth
    , configFormatter                 = Nothing
    , configConcurrentJobs            = Nothing
    , configFailureReport             = Nothing
    }

data Summary = Summary
    { summaryExamples :: Int
    , summaryFailures :: Int
    }
derive Eq   Summary
derive Show Summary

isSuccess :: Summary -> Bool
isSuccess summary = summary.summaryFailures == 0

hspecWithResult :: Config -> Spec -> IO Summary
hspecWithResult config spec = do
    prog <- getProgName
    args <- getArgs
    (oldFailureReport, c_) <- getConfig config prog args
    c <- ensureSeed c_
    if c.configRerunAllOnSuccess
        then do
            summary <- runSpec c spec
            if rerunAll c oldFailureReport summary
                then hspecWithResult config spec
                else return summary
        else runSpec c spec

runSpec :: Config -> Spec -> IO Summary
runSpec = undefined

rerunAll :: Config -> Maybe FailureReport -> Summary -> Bool
rerunAll _      Nothing                 _       = false
rerunAll config (Just oldFailureReport) summary =
    config.configRerunAllOnSuccess
        && config.configRerun
        && isSuccess summary
        && (not . null) oldFailureReport.failureReportPaths

ensureSeed :: Config -> IO Config
ensureSeed c =
    case c.configQuickCheckSeed of
        Nothing -> do
            seed <- newSeed
            return c.{ configQuickCheckSeed = Just (fromIntegral seed) }
        Just _ -> return c

newSeed :: IO Int
newSeed = fst . randomR (0, maxBound :: Int) <$> newStdGen

getConfig :: Config -> String -> [String] -> IO (Maybe FailureReport, Config)
getConfig opts_ prog args = do
    configFiles <- do
        ignore <- ignoreConfigFile opts_ args
        case ignore of
            True  -> return []
            False -> readConfigFiles
    case parseOptions opts_ prog configFiles args of
        Left (err, msg) -> exitWithMessage err msg
        Right opts -> do
            r <- if opts.configRerun
                then readFailureReport
                else return Nothing
            return (r, mkConfig r opts)

type Path = ([String], String)

data FailureReport = FailureReport
    { failureReportPaths           :: [Path]
    , failureReportSeed            :: Integer
    , failureReportMaxSuccess      :: Int
    , failureReportMaxDiscardRatio :: Int
    , failureReportMaxSize         :: Int
    }

ignoreConfigFile :: Config -> [String] -> IO Bool
ignoreConfigFile config args = do
    case System.getenv "IGNORE_DOT_HSPEC" of
        Just _  -> return True
        Nothing -> do
            case parse recognizedOptions config args of
                Right (Just c) -> return c.configIgnoreConfigFile
                Right Nothing  -> return False
                Left  _        -> return False

-- Todo: originally Test.Hspec.Core.Options.Result
type OptResult m = Either InvalidArgument (m Config)

data InvalidArgument = InvalidArgument String String

recognizedOptions :: [OptDescr (OptResult Maybe -> OptResult Maybe)]
recognizedOptions = documentedOptions ++ undocumentedOptions

documentedOptions :: [OptDescr (OptResult Maybe -> OptResult Maybe)]
documentedOptions = commandLineOptions ++ configFileOptions

lineBreakAt :: Int -> String -> [String]
lineBreakAt n input = case words input of
    []       -> []
    (x : xs) -> go (x, xs)
        where
            go :: (String, [String]) -> [String]
            go c = case c of
                (s, []    ) -> [s]
                (s, y : ys) -> let r = s ++ " " ++ y in
                    if length r <= n
                        then go (r, ys)
                        else s : go (y, ys)

addLineBreaks :: String -> [String]
addLineBreaks = lineBreakAt 40

h :: String -> String
h = unlines . addLineBreaks

set :: (Monad m) =>
    (Config -> Config) -> Either a (m Config) -> Either a (m Config)
set = undefined

-- Todo: originally Test.Hspec.Core.Options.Arg
data OptionArg a = OptionArg {
      argumentName   :: String
    , argumentParser :: String -> Maybe a
    , argumentSetter :: a -> Config -> Config
    }

mkOption :: (Monad m) =>
    [Char] -> String -> OptionArg a -> String -> OptDescr (OptResult m -> OptResult m)
mkOption shortcut name (OptionArg argName parser setter) help =
    Option shortcut [name] (ReqArg arg argName) help
        where
            arg input x = x >>= \c -> case parser input of
                Just n  -> Right (setter n `liftM` c)
                Nothing -> Left  (InvalidArgument name input)

filterPredicate :: String -> Path -> Bool
filterPredicate pattern (groups, requirement) =
    pattern `isInfixStringOf` plain     ||
    pattern `isInfixStringOf` formatted
        where
            plain     = intercalate "/" (groups ++ [requirement])
            formatted = formatRequirement (groups, requirement)

formatRequirement :: Path -> String
formatRequirement (groups, requirement) = groups_ ++ requirement
    where
        groups_ = case break (isInfixStringOf " ") groups of
            ([], ys) -> join ys
            (xs, ys) -> join $ intercalate "." xs : ys
        join xs = case xs of
            [x] -> x ++ " "
            ys  -> intercalate ", " ys

addMatch :: String -> Config -> Config
addMatch s c = c.{ configFilterPredicate =
        Just (filterPredicate s) `filterOr` c.configFilterPredicate }

addSkip :: String -> Config -> Config
addSkip s c = c.{ configSkipPredicate =
    Just (filterPredicate s) `filterOr` c.configSkipPredicate }

commandLineOptions :: [OptDescr (OptResult Maybe -> OptResult Maybe)]
commandLineOptions = [
      Option   []    ["help"]             (NoArg (const $ Right Nothing))
               (h "display this help and exit")
    , Option   []    ["ignore-dot-hspec"] (NoArg setIgnoreConfigFile)
               (h "do not read options from ~/.hspec and .hspec")
    , mkOption ['m'] "match"              (OptionArg "PATTERN" return addMatch)
               (h "only run examples that match given PATTERN")
    , mkOption []    "skip"               (OptionArg "PATTERN" return addSkip)
               (h "skip examples that match given PATTERN")
    ]
    where
        setIgnoreConfigFile =
            set $ \config -> config.{ configIgnoreConfigFile = true }

data ColorMode = ColorAuto | ColorNever | ColorAlways

-- stub
configFileOptions :: [OptDescr (OptResult Maybe -> OptResult Maybe)]
configFileOptions = [
      Option   []    ["color"]            (NoArg setColor)                    (h "colorize the output")
    , Option   []    ["no-color"]         (NoArg setNoColor)                  (h "do not colorize the output")
    , Option   []    ["diff"]             (NoArg setDiff)                     (h "show colorized diffs")
    , Option   []    ["no-diff"]          (NoArg setNoDiff)                   (h "do not show colorized diffs")
    , mkOption ['f']  "format"            (OptionArg "FORMATTER" readFormatter setFormatter) formatHelp
    , mkOption ['o']  "out"               (OptionArg "FILE" return setOutputFile)   (h "write output to a file instead of STDOUT")
    , mkOption []     "depth"             (OptionArg "N" readMaybe setDepth)        (h "maximum depth of generated test values for SmallCheck properties")
    , mkOption ['a']  "qc-max-success"    (OptionArg "N" readMaybe setMaxSuccess)   (h "maximum number of successful tests before a QuickCheck property succeeds")
    , mkOption []     "qc-max-size"       (OptionArg "N" readMaybe setMaxSize)      (h "size to use for the biggest test cases")
    , mkOption []     "qc-max-discard"    (OptionArg "N" readMaybe setMaxDiscardRatio)    (h "maximum number of discarded tests per successful test before giving up")
    , mkOption []     "seed"              (OptionArg "N" readMaybe setSeed)         (h "used seed for QuickCheck properties")
    , Option   []    ["print-cpu-time"]   (NoArg setPrintCpuTime)             (h "include used CPU time in summary")
    , Option   []    ["dry-run"]          (NoArg setDryRun)                   (h "pretend that everything passed; don't verify anything")
    , Option   []    ["fail-fast"]        (NoArg setFastFail)                 (h "abort on first failure")
    , Option   ['r'] ["rerun"]            (NoArg setRerun)                    (h "rerun all examples that failed in the previous test run (only works in combination with --failure-report or in GHCi")
    , mkOption []     "failure-report"    (OptionArg "FILE" return setFailureReport) (h "read/write a failure report for use with --rerun")
    , Option   []    ["rerun-all-on-success"] (NoArg setRerunAllOnSuccess)    (h "run the whole test suite after a previously failing rerun succeeds for the first time (only works in combination with --rerun)")
    , mkOption ['j']  "jobs"              (OptionArg "N" readMaxJobs setMaxJobs)    (h "run at most N parallelizable tests simultaneously (default: number of available processors)")
    ]
    where
        setColor        = set $ \config -> config.{ configColorMode = ColorAlways }
        setNoColor      = set $ \config -> config.{ configColorMode = ColorNever }
        setDiff         = set $ \config -> config.{ configDiff = True }
        setNoDiff       = set $ \config -> config.{ configDiff = False }
        setPrintCpuTime = set $ \config -> config.{ configPrintCpuTime = True }
        setDryRun       = set $ \config -> config.{ configDryRun = True }
        setFastFail     = set $ \config -> config.{ configFastFail = True }
        setRerun        = set $ \config -> config.{ configRerun = True }
        setRerunAllOnSuccess = set $ \config -> config.{ configRerunAllOnSuccess = True }

        readFormatter :: String -> Maybe Formatter
        readFormatter = undefined

        setFormatter :: Formatter -> Config -> Config
        setFormatter f c = c.{ configFormatter = Just f }

        setOutputFile :: String -> Config -> Config
        setOutputFile = undefined

        setFailureReport :: String -> Config -> Config
        setFailureReport file c = c.{ configFailureReport = Just file }

        readMaxJobs :: String -> Maybe Int
        readMaxJobs s = do
            n <- readMaybe s
            guard $ n > 0
            return n

        setMaxJobs :: Int -> Config -> Config
        setMaxJobs n c = c.{ configConcurrentJobs = Just n }

data Formatter = Formatter {
      headerFormatter     :: FormatM ()
    , exampleGroupStarted :: [String] -> String -> FormatM ()
    , exampleGroupDone    :: FormatM ()
    , exampleProgress     :: Handle -> Path -> Progress -> IO ()
    , exampleSucceeded    :: Path -> FormatM ()
    , exampleFailed       ::  Path -> Either Throwable FailureReason -> FormatM ()
--    , exampleFailed       ::  Path -> Either SomeException FailureReason -> FormatM ()
    , examplePending      :: Path -> Maybe String -> FormatM ()
    , failedFormatter     :: FormatM ()
    , footerFormatter     :: FormatM ()
    }

specdoc :: Formatter
specdoc = undefined

progress :: Formatter
progress = undefined

failed_examples :: Formatter
failed_examples = undefined

silent :: Formatter
silent = undefined

formatters :: [(String, Formatter)]
formatters = [
      ("specdoc", specdoc)
    , ("progress", progress)
    , ("failed-examples", failed_examples)
    , ("silent", silent)
    ]

formatHelp :: String
formatHelp =
    unlines $ addLineBreaks "use a custom formatter; this can be one of:" ++
    map (("   " ++) . fst) formatters

setDepth :: Int -> Config -> Config
setDepth n c = c.{ configSmallCheckDepth = n }

setMaxSuccess :: Int -> Config -> Config
setMaxSuccess n c = c.{ configQuickCheckMaxSuccess = Just n }

setMaxSize :: Int -> Config -> Config
setMaxSize n c = c.{ configQuickCheckMaxSize = Just n }

setMaxDiscardRatio :: Int -> Config -> Config
setMaxDiscardRatio n c = c.{ configQuickCheckMaxDiscardRatio = Just n }

setSeed :: Integer -> Config -> Config
setSeed n c = c.{ configQuickCheckSeed = Just n }

undocumentedOptions :: [OptDescr (OptResult Maybe -> OptResult Maybe)]
undocumentedOptions = undefined

parse :: (Monad m) =>
    [OptDescr (OptResult m -> OptResult m)] -> Config -> [String] ->
    Either String (m Config)
parse = undefined

readConfigFiles :: IO [ConfigFile]
readConfigFiles = do
    global <- readGlobalConfigFile
    local  <- readLocalConfigFile
    return $ catMaybes [global, local]

readGlobalConfigFile :: IO (Maybe ConfigFile)
readGlobalConfigFile = do
    case System.getProperty "user.home" of
        Nothing   -> return Nothing
        Just home -> readConfigFile (home </> ".hspec")

readLocalConfigFile :: IO (Maybe ConfigFile)
readLocalConfigFile = do
    mName <- canonicalizePath ".hspec"
    case mName of
        Nothing   -> return Nothing
        Just name -> readConfigFile name

readConfigFile :: FilePath -> IO (Maybe ConfigFile)
readConfigFile name = do
    exists <- doesFileExist name
    if exists
        then Just . (,) name . words <$> readFile name
        else return Nothing

type ConfigFile = (FilePath, [String])

parseOptions ::
    Config -> String -> [ConfigFile] -> [String] ->
    Either (ExitCode, String) Config
parseOptions = undefined

exitWithMessage :: ExitCode -> String -> IO a
exitWithMessage = undefined

mkConfig :: Maybe FailureReport -> Config -> Config
mkConfig mFailureReport opts = opts.{
      configFilterPredicate           = matchFilter `filterOr` rerunFilter
    , configQuickCheckSeed            = mSeed
    , configQuickCheckMaxSuccess      = mMaxSuccess
    , configQuickCheckMaxDiscardRatio = mMaxDiscardRatio
    , configQuickCheckMaxSize         = mMaxSize
    }
    where
        matchFilter = opts.configFilterPredicate
        rerunFilter = case _.failureReportPaths <$> mFailureReport of
            Nothing -> Nothing
            Just [] -> Nothing
            Just xs -> Just (`elem` xs)
        mSeed = opts.configQuickCheckSeed <|>
            (_.failureReportSeed <$> mFailureReport)
        mMaxSuccess = opts.configQuickCheckMaxSuccess <|>
            (_.failureReportMaxSuccess <$> mFailureReport)
        mMaxDiscardRatio = opts.configQuickCheckMaxDiscardRatio <|>
            (_.failureReportMaxDiscardRatio <$> mFailureReport)
        mMaxSize = opts.configQuickCheckMaxSize <|>
            (_.failureReportMaxSize <$> mFailureReport)

filterOr ::
    Maybe (Path -> Bool) -> Maybe (Path -> Bool) -> Maybe (Path -> Bool)
filterOr mP1 mP2 = case (mP1, mP2) of
    (Just p1, Just p2) -> Just $ \path -> p1 path || p2 path
    _                  -> mP1 <|> mP2

readFailureReport :: IO (Maybe FailureReport)
readFailureReport = do
    case System.getenv "HSPEC_FAILURES" >>= readMaybe of
        Nothing -> do
            stderr.println "WARNING: Could not read environment variable HSPEC_FAILURES; `--rerun' is ignored!'"
            return Nothing
        x -> return x

---------- in hspec-expectations -----------------

type Expectation = Assertion

--shouldBe :: (?loc :: CallStack, Show a, Eq a) => a -> a -> Expectation
shouldBe :: (Show a, Eq a) => a -> a -> Expectation
actual `shouldBe` expected = expectTrue
    ("expected: " ++ show expected ++ "\n but got: " ++ show actual)
    (actual == expected)
infix 1 shouldBe

--expectTrue :: (?loc :: CallStack) => String -> Bool -> Expectation
expectTrue :: String -> Bool -> Expectation
expectTrue msg b = unless b (expectationFailure msg)

--expectationFailure :: (?loc :: CallStack) => String -> Expectation
expectationFailure :: String -> Expectation
expectationFailure = assertFailure

---------- in HUnit -----------------

type Assertion = IO ()

--(?loc :: CallStack) => String -> Assertion
assertFailure :: String -> Assertion
assertFailure msg = msg `deepseq` throwIO (HUnitFailure.new msg)

---------- others -----------------

--TODO: Is there an more better exception than IAE?
data HUnitFailure = pure native java.lang.IllegalArgumentException where
    pure native new        :: String -> HUnitFailure
    pure native getMessage :: HUnitFailure -> String

--TODO: the original deepseq evaluate the 1st arg strictly
--deepseq :: (NFData a) => a -> b -> b
deepseq _ = id

--TODO: using StateT transformer is better?
-- Frege doesn't have the Writer monad
data WriterT w m a = WriterT { run :: m (a, w) }

mapWriterT :: (m (a, w) -> n (b, w')) -> WriterT w m a -> WriterT w' n b
mapWriterT f m = WriterT $ f m.run

instance (Functor m) => Functor (WriterT w m) where
    fmap f = mapWriterT $ fmap $ \(x, w) -> (f x, w)

instance (Monoid w, Applicative m) => Applicative (WriterT w m) where
    pure x = WriterT $ pure (x, mempty)
    (<*>) f v = WriterT $ liftA2 k f.run v.run
        where
            k (g, w) (x, w') = (g x, w `mappend` w')

instance (Monoid w, Monad m) => Monad (WriterT w m) where
    pure = Applicative.pure
    (>>=) m k = WriterT $ do
        (x, w)  <- m.run
        (y, w') <- (k x).run
        return (y, w `mappend` w')

instance (Monoid w, MonadIO m) => MonadIO (WriterT w m) where
    liftIO = lift . liftIO

instance (Monoid w) => MonadTrans (WriterT w) where
    lift m = WriterT $ do
        x <- m
        return (x, mempty)

execWriterT :: (Monad m) => WriterT w m a -> m w
execWriterT m = do
    (_, w) <- m.run
    return w

writer :: (Monad m) => (a, w) -> WriterT w m a
writer = WriterT . return

tell :: (Monoid w, Monad m) => w -> WriterT w m ()
tell x = writer ((), x)

catches :: IO a -> [Handler a] -> IO a
catches io handlers = fold catch (try (\() -> io) ()) handlers

type Handler a = Throwable -> IO a

-- instance Functor Hander where

-- Todo: in v3.23, getProgName is not implemented yet
getProgName :: IO String
getProgName = return ""

-- Todo: in v3.23, getArgs is not implemented yet
getArgs :: IO [String]
getArgs = undefined

--Todo: in v3.23, File.separator is not implemented yet
(</>) :: FilePath -> FilePath -> FilePath
(</>) p1 p2 = p1 ++ "/" ++ p2
infix 5 </>

canonicalizePath :: FilePath -> IO (Maybe FilePath)
canonicalizePath = undefined

doesFileExist :: FilePath -> IO Bool
doesFileExist name = File.new name >>= _.exists

-- Todo: The Read typeclass is not implemented
--readMaybe :: (Read a) => String -> Maybe a
readMaybe :: String -> Maybe a
readMaybe = undefined

data OptDescr a = Option [Char] [String] (ArgDescr a) String
-- instance Functor OptDescr where

data ArgDescr a =
      NoArg  a
    | ReqArg (String -> a)       String
    | OptArg (Maybe String -> a) String
-- instance Functor ArgDescr where

-- Todo: somewhy Maybe is not an instance of Alt
instance Alt Maybe where
    (<|>) Nothing  mY = mY
    (<|>) (Just x) _  = Just x

-- frege.data.List.isInfixOf is only for [a]
isInfixStringOf :: String -> String -> Bool
isInfixStringOf s1 s2 = isInfixOf (unpacked s1) (unpacked s2)

main = hspec $ do
    describe "Prelude.head" $ do
        it "returns the first element of a list" $ do
            head [23 ..] `shouldBe` 23
