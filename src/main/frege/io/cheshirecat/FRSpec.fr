module io.cheshirecat.FRSpec where

-- type stabs
type WriterT w m a = ()
type FilePath = String
type Args = () -- Defined in QuichCheck

type SpecWith a = SpecM a ()

type ActionWith a = a -> IO ()

data Tree c a =
      Node String [Tree a c]
    | NodeWithCleanup c [Tree c a]
    | Leaf a

--instance Functor (Tree c) where
--instance Foldable (Tree c) where
--instance Traversable (Tree c) where

data Params = Params
    { paramsQuickCheckArgs  :: Args
    , paramsSmallCheckDepth :: Int
    }

--instance Show Params where

type Progress = (Int, Int)

type ProgressCallback = Progress -> IO ()

data LocationAccuracy =
      ExactLocation
    | BestEffort

--instance Eq LocationAccuracy
--instance Read LocationAccuracy
--instance Show LocationAccuracy

data Location = Location
    { locationFile     :: FilePath
    , locationLine     :: Int
    , locationColumn   :: Int
    , locationAccuracy :: LocationAccuracy
    }

--instance Eq Location where
--instance Read Location where
--instance Show Location where

data Result =
      Success
    | Pending (Maybe String)
    | Fail (Maybe Location) String

--instance Eq Result where
--instance Read Result where
--instance Show Result where
--instance Exception Result where
--instance Example Result where
--type Arg Result

data Item a = Item
    { itemRequirement      :: String
    , itemLocation         :: Maybe Location
    , itemIsParallelizable :: Bool
    , itemExample          :: Params -> (ActionWith a -> IO ()) ->
                              ProgressCallback -> IO Result
    }

type SpecTree a = Tree (ActionWith a) (Item a)

type SpecM a r = WriterT [SpecTree a] IO r

--instance Functor (SpecM a r) where
--instance Applicative (SpecM a r) where
--instance Monad (SpecM a r) where

describe :: String -> SpecWith a -> SpecWith a
describe = undefined

main = println "Hello, FRSpec!"
